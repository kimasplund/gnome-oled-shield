name: CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan

# Global environment variables
env:
  NODE_VERSION: '20'
  UBUNTU_VERSION: '24.04'

# Default permissions for all jobs
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  validate:
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:24.04
      options: >-
        --privileged
        -v /sys/fs/cgroup:/sys/fs/cgroup:rw
        --cgroupns=host
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y \
            gjs \
            gnome-shell \
            zip \
            jq \
            libxml2-utils \
            nodejs \
            npm \
            git \
            curl \
            wget \
            build-essential \
            pkg-config \
            libgtk-4-dev \
            libglib2.0-dev \
            libgirepository1.0-dev \
            gir1.2-gtk-4.0 \
            gir1.2-glib-2.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          check-latest: true

      - name: Install dependencies
        run: |
          npm ci
          npm install -D eslint nyc mocha chai sinon gjs-unit

      - name: Run validation checks
        run: |
          # Validate JSON
          jq '.' metadata.json > /dev/null
          for schema in schemas/*.xml; do
            xmllint --noout "$schema"
          done

          # Compile Schemas
          mkdir -p build/schemas
          glib-compile-schemas --strict --targetdir=build/schemas/ schemas/

          # Run ESLint
          eslint extension.js prefs.js

          # Run Tests with Coverage
          nyc --reporter=lcov --reporter=text-summary mocha tests/**/*.test.js

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  security:
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
          tools: linked

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          upload: true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --severity-threshold=high
            --all-projects
            --detection-depth=4
            --exclude=tests,dist,build

  test:
    needs: validate
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        gnome-version: ['48', '47', '46', '45']
        display-server: ['x11', 'wayland']
    container:
      image: ghcr.io/gnome/gnome-runtime-images:${{ matrix.gnome-version }}
      options: --privileged
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Test Environment
        run: |
          dnf update -y
          dnf install -y \
            gjs \
            gnome-shell \
            ${{ matrix.display-server == 'x11' && 'xorg-x11-server-Xvfb' || 'wayland-protocols' }} \
            mesa-dri-drivers \
            dbus-x11 \
            which \
            procps \
            git

          mkdir -p /run/dbus
          dbus-daemon --system --fork
          
          if [ "${{ matrix.display-server }}" = "x11" ]; then
            export DISPLAY=:99
            export GDK_BACKEND=x11
            Xvfb :99 -screen 0 1024x768x24 &
          else
            export DISPLAY=:0
            export GDK_BACKEND=wayland
            export WAYLAND_DISPLAY=wayland-0
            export WLR_BACKENDS=headless
            export XDG_RUNTIME_DIR=/tmp/runtime-dir
            mkdir -p $XDG_RUNTIME_DIR
            chmod 700 $XDG_RUNTIME_DIR
          fi
          sleep 3

      - name: Run Tests
        run: |
          if [ "${{ matrix.display-server }}" = "x11" ]; then
            gnome-shell --replace --x11 --unsafe-mode &
          else
            gnome-shell --replace --wayland --unsafe-mode &
          fi
          sleep 5
          gjs \
            -I /usr/share/gnome-shell \
            -I . \
            tests/environment/${{ matrix.display-server }}/gnome${{ matrix.gnome-version }}/**/*.js
        env:
          GSETTINGS_BACKEND: memory
          SHELL: /bin/bash
          MUTTER_DEBUG: 1
          G_MESSAGES_DEBUG: all

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ matrix.gnome-version }}-${{ matrix.display-server }}
          path: logs/

  release:
    needs: [validate, test, security]
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build and Package
        run: |
          make build
          make package

      - name: Get Version
        id: get_version
        run: echo "version=$(jq -r '.version' metadata.json)" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        run: |
          echo "## Changes" > RELEASE_NOTES.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Security Scan Results" >> RELEASE_NOTES.md
          echo "✅ Passed CodeQL Analysis" >> RELEASE_NOTES.md
          echo "✅ Passed Snyk Security Scan" >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}