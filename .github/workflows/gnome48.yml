name: GNOME 48 CI

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.js'
      - 'metadata.json'
      - '.github/workflows/gnome48.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.js'
      - 'metadata.json'
      - '.github/workflows/gnome48.yml'

# Global environment variables
env:
  NODE_VERSION: '20'
  UBUNTU_VERSION: '24.04'

# Default permissions for all jobs
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test-gnome48:
    name: Test GNOME 48
    strategy:
      matrix:
        display-server: ['x11', 'wayland']
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:oracular
      options: >-
        --privileged
        -v /sys/fs/cgroup:/sys/fs/cgroup:rw
        --cgroupns=host
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Test Environment
        run: |
          # System info
          cat /etc/os-release
          uname -a
          
          # Configure apt for noninteractive
          export DEBIAN_FRONTEND=noninteractive
          
          # Add GNOME Team PPA for latest GNOME packages
          apt-get update
          apt-get install -y software-properties-common gpg-agent
          add-apt-repository -y ppa:gnome3-team/gnome3-staging
          add-apt-repository -y ppa:gnome3-team/gnome3
          
          # Update package lists
          apt-get update
          
          # Install GNOME 48 packages
          apt-get install -y \
            gjs \
            gnome-shell \
            ${{ matrix.display-server == 'x11' && 'xvfb' || 'wayland-protocols' }} \
            mesa-utils \
            dbus-x11 \
            procps \
            git \
            nodejs \
            npm \
            mutter \
            gnome-settings-daemon \
            gnome-session \
            systemd \
            dbus \
            libdbus-1-3 \
            at-spi2-core

          # Verify GNOME version
          gnome-shell --version
          
          # Setup systemd
          systemctl start dbus

          # Setup DBus
          mkdir -p /run/dbus
          dbus-daemon --system --fork
          
          # Setup environment variables
          if [ "${{ matrix.display-server }}" = "x11" ]; then
            export DISPLAY=:99
            export GDK_BACKEND=x11
            Xvfb :99 -screen 0 1024x768x24 &
          else
            export DISPLAY=:0
            export GDK_BACKEND=wayland
            export WAYLAND_DISPLAY=wayland-0
            export WLR_BACKENDS=headless
            export XDG_RUNTIME_DIR=/tmp/runtime-dir
            mkdir -p $XDG_RUNTIME_DIR
            chmod 700 $XDG_RUNTIME_DIR
          fi

          # Debug info
          echo "Display server: ${{ matrix.display-server }}"
          echo "DISPLAY: $DISPLAY"
          echo "GDK_BACKEND: $GDK_BACKEND"
          echo "DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS"
          
          # Wait for display to be ready
          sleep 3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Test Dependencies
        run: |
          npm ci
          npm install -D mocha chai sinon gjs-unit nyc

      - name: Run Tests
        run: |
          # Start GNOME Shell with debug output
          if [ "${{ matrix.display-server }}" = "x11" ]; then
            SHELL_DEBUG=all gnome-shell --replace --x11 --unsafe-mode &
          else
            SHELL_DEBUG=all gnome-shell --replace --wayland --unsafe-mode &
          fi
          
          # Wait for GNOME Shell to start and show debug info
          sleep 5
          ps aux | grep gnome-shell
          
          # Run tests with coverage
          SHELL_DEBUG=all nyc --reporter=lcov --reporter=text-summary \
            gjs \
              -I /usr/share/gnome-shell \
              -I . \
              tests/environment/${{ matrix.display-server }}/gnome48/**/*.js
        env:
          GSETTINGS_BACKEND: memory
          SHELL: /bin/bash
          XDG_SESSION_TYPE: ${{ matrix.display-server }}
          MUTTER_DEBUG: 1
          G_MESSAGES_DEBUG: all

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: gnome48-${{ matrix.display-server }}
          fail_ci_if_error: true

      - name: Collect Test Logs
        if: always()
        run: |
          mkdir -p logs
          journalctl -b > logs/journal.log
          if [ -f ~/.cache/gnome-shell/errors.log ]; then
            cp ~/.cache/gnome-shell/errors.log logs/gnome-shell-errors.log
          fi
          # Collect additional debug info
          dbus-monitor > logs/dbus.log &
          sleep 2
          pkill dbus-monitor
          ps aux > logs/processes.log
          env > logs/environment.log
          gnome-shell --version > logs/gnome-version.log

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-gnome48-${{ matrix.display-server }}
          path: logs/

  validate-gnome48:
    name: Validate GNOME 48
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:oracular
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          # Configure apt for noninteractive
          export DEBIAN_FRONTEND=noninteractive
          
          # Add GNOME Team PPA
          apt-get update
          apt-get install -y software-properties-common gpg-agent
          add-apt-repository -y ppa:gnome3-team/gnome3-staging
          add-apt-repository -y ppa:gnome3-team/gnome3
          
          # Update and install packages
          apt-get update
          apt-get install -y \
            gjs \
            gnome-shell \
            jq \
            libxml2-utils \
            nodejs \
            npm
          npm install -g eslint

      - name: Validate JSON
        run: |
          jq '.' metadata.json > /dev/null
          for schema in schemas/*.xml; do
            xmllint --noout "$schema"
          done

      - name: Validate GNOME Version Support
        run: |
          if ! jq -e '.["shell-version"] | contains(["48"])' metadata.json > /dev/null; then
            echo "Error: metadata.json does not support GNOME 48"
            exit 1
          fi

      - name: Run ESLint
        run: eslint extension.js prefs.js

      - name: Check Portal API Usage
        run: |
          if ! grep -q "Shell.Screenshot.getPortalProxy()" extension.js; then
            echo "Warning: Portal API usage not detected for GNOME 48"
            exit 1
          fi

  build-gnome48:
    name: Build GNOME 48
    needs: [test-gnome48, validate-gnome48]
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:oracular
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          # Configure apt for noninteractive
          export DEBIAN_FRONTEND=noninteractive
          
          # Add GNOME Team PPA
          apt-get update
          apt-get install -y software-properties-common gpg-agent
          add-apt-repository -y ppa:gnome3-team/gnome3-staging
          add-apt-repository -y ppa:gnome3-team/gnome3
          
          # Update and install packages
          apt-get update
          apt-get install -y \
            zip \
            jq \
            gjs \
            gnome-shell

      - name: Get Version
        id: get_version
        run: echo "version=$(jq -r '.version' metadata.json)" >> $GITHUB_OUTPUT

      - name: Build Extension
        run: make build

      - name: Create Package
        run: make package

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: oled-care-gnome48-v${{ steps.get_version.outputs.version }}
          path: dist/*.zip 